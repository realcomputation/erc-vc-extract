
(***********)
(*
 *  This is a Coq source code generated by ERC-wp-calc.
 *  ERC-wp-calc is a program extracts correctness conditions written by Sewon Park @ KAIST.
 *  If you see the message it means that the extraction program is at its stage of prototype.
 *  Any feedback or bug report will be appreciated! :)
 *)

(***********)
(*
 *  The program uses ***_prec.v which contains definition of prec (precision embedding) function and
 *  some may useful lemmas and their proofs:
 *
 * - prec : Z -> R such that prec z means 2^z
 * - Lemma prec_pos : forall z : Z, prec z > 0.
 * - Lemma prec_mult : forall z1 z2 : Z, prec (z1 + z2) = prec z1 * prec z2.
 * - Lemma prec_div : forall z1 z2 : Z, prec(z1 - z2) = prec z1 */ prec z2.
 *
 *  ***_prec.v can be loaded after compiling it "coqc ***_prec.v"
 *)
 
Require Import Reals.
Require Import ZArith.
Require Import soft_comparison_prec.



(* Proving correctness of the following program:
 *
 * Precondition: True
 *
 * Input:  p : Z y : R x : R
 *
 * Newvar k := 0
 * if(Choose(test(x>y + -iota(p)), test(y>x + -iota(p))))
 * then
 *  assign k := 0
 * else
 *  assign k := 1
 *
 * Return k
 *
 * Postcondition: (((@res=1)%Z -> (x>(y + - (prec p)))%R) /\ ((@res=0)%Z -> (y>(x + - (prec p)))%R))*)


(**********)
(* Single valued functions loaded to the language *)




(**********)
(* Definition of predicates *)




(**********)
(* Assumed axioms *)




(**********)
(* Assumed Coq axioms *)


(**********)
(* put your supplementary lemmas and definitions here *)


(**********)
(* Theorems to be proven *)

Theorem theorem0 : 
	forall p : Z, (forall y : R, (forall x : R, ((((x>(y + - (prec p)))%R \/ (y>(x + - (prec p)))%R) /\ (((y>(x + - (prec p)))%R -> (y>(x + - (prec p)))%R) /\ ((x>(y + - (prec p)))%R -> (x>(y + - (prec p)))%R)))))).
Proof.
Admitted.


