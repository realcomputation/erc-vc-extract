
(***********)
(*
 *  This is a Coq source code generated by ERC-wp-calc.
 *  ERC-wp-calc is a program extracts correctness conditions written by Sewon Park @ KAIST.
 *  If you see the message it means that the extraction program is at its stage of prototype.
 *  Any feedback or bug report will be appreciated! :)
 *)

(***********)
(*
 *  The program uses ***_prec.v which contains definition of prec (precision embedding) function and
 *  some may useful lemmas and their proofs:
 *
 * - prec : Z -> R such that prec z means 2^z
 * - Lemma prec_pos : forall z : Z, prec z > 0.
 * - Lemma prec_mult : forall z1 z2 : Z, prec (z1 + z2) = prec z1 * prec z2.
 * - Lemma prec_div : forall z1 z2 : Z, prec(z1 - z2) = prec z1 */ prec z2.
 *
 *  ***_prec.v can be loaded after compiling it "coqc ***_prec.v"
 *)
 
Require Import Reals.
Require Import ZArith.
Require Import trisection_prec.



(* Proving correctness of the following program:
 *
 * Precondition: True
 *
 * Input:  p : Z
 *
 * Newvar a := 0
 * Newvar b := 1
 * while (Choose(test(iota(p)>b + -a), test(b + -a>iota(p + -1))))
 * do
 *  if(Choose(test(f(a + 2 * b * /3)>0), test(0>f(2 * a + b * /3))))
 *  then
 *   assign a := 2 * a + b * /3
 *  else
 *   assign b := a + 2 * b * /3
 *
 * Return a
 *
 * Postcondition: (((1>@res)%R /\ (@res>0)%R) /\ exists root : R, ((((f root )=0)%R /\ (((prec p)>(root + - @res))%R /\ ((root + - @res)>- (prec p))%R))))*)


(**********)
(* Single valued functions loaded to the language *)

Parameter f : R   -> R.



(**********)
(* Definition of predicates *)

Definition uniq (_in1435 : R)(_in1436 : R) := ((((((1>_in1435)%R /\ (_in1435>0)%R) /\ ((1>_in1436)%R /\ (_in1436>0)%R)) /\ (_in1436>_in1435)%R) /\ (((f _in1436 )>0)%R /\ (0>(f _in1435 ))%R)) /\ exists z : R, (((((_in1436>z)%R /\ (z>_in1435)%R) /\ ((f z )=0)%R) /\ forall _uniqz2 : R, (((((_in1436>_uniqz2)%R /\ (_uniqz2>_in1435)%R) /\ ((f _uniqz2 )=0)%R) -> (z=_uniqz2)%R))))).




(**********)
(* Assumed axioms *)

Axiom axiom6 : 
	(uniq 0 1 ).

Axiom axiom7 : 
	forall _v1 : R, ((True -> (((f 1 )>0)%R /\ (0>(f 0 ))%R))).




(**********)
(* Assumed Coq axioms *)

Axiom axiomCoq5 : 
	 continuity f.


(**********)
(* put your supplementary lemmas and definitions here *)


(**********)
(* Theorems to be proven *)

Theorem theorem0 : 
	(uniq 0 1 ).
Proof.
Admitted.

Theorem theorem1 : 
	forall p : Z, (forall _b1432 : R, (forall _a1431 : R, ((((((uniq _a1431 _b1432 ) /\ ((prec p)>(_b1432 + - _a1431))%R) -> (1>_a1431)%R) /\ (((uniq _a1431 _b1432 ) /\ ((prec p)>(_b1432 + - _a1431))%R) -> (_a1431>0)%R)) /\ (((uniq _a1431 _b1432 ) /\ ((prec p)>(_b1432 + - _a1431))%R) -> exists root : R, ((((f root )=0)%R /\ (((prec p)>(root + - _a1431))%R /\ ((root + - _a1431)>- (prec p))%R)))))))).
Proof.
Admitted.

Theorem theorem2 : 
	forall p : Z, (forall _b1430 : R, (forall _a1429 : R, (((uniq _a1429 _b1430 ) -> (((prec p)>(_b1430 + - _a1429))%R \/ ((_b1430 + - _a1429)>(prec (p + - 1)))%R))))).
Proof.
Admitted.

Theorem theorem3 : 
	forall p : Z, (forall _b1428 : R, (forall _a1427 : R, (exists _loopc08 : R, ((((uniq _a1427 _b1428 ) /\ ((_b1428 + - _a1427)>(prec (p + - 1)))%R) -> ((((f ((_a1427 + (2 * _b1428)) * (-1 * / -3)) )>0)%R \/ (0>(f (((2 * _a1427) + _b1428) * (-1 * / -3)) ))%R) /\ (((0>(f (((2 * _a1427) + _b1428) * (-1 * / -3)) ))%R -> ((uniq (((2 * _a1427) + _b1428) * (-1 * / -3)) _b1428 ) /\ ((((_b1428 + - _a1427) + - (prec (p + - 1))) + - _loopc08)>((_b1428 + - (((2 * _a1427) + _b1428) * (-1 * / -3))) + - (prec (p + - 1))))%R)) /\ (((f ((_a1427 + (2 * _b1428)) * (-1 * / -3)) )>0)%R -> ((uniq _a1427 ((_a1427 + (2 * _b1428)) * (-1 * / -3)) ) /\ ((((_b1428 + - _a1427) + - (prec (p + - 1))) + - _loopc08)>((((_a1427 + (2 * _b1428)) * (-1 * / -3)) + - _a1427) + - (prec (p + - 1))))%R))))))))).
Proof.
Admitted.

Theorem theorem4 : 
	forall p : Z, (forall _b1426 : R, (forall _a1425 : R, (((0>((_b1426 + - _a1425) + - (prec (p + - 1))))%R -> (((_b1426 + - _a1425)>(prec (p + - 1)))%R -> False))))).
Proof.
Admitted.


